package com.github.mgljava.basicstudy.designpattern.factory.simple;

// 简单工厂模式
/**
 * 定义：定义一个工厂类，根据传入的参数不同返回不同的实例，被创建的实例具有共同的父类或接口。
 * 适用场景：
 * 　　首先由于只有一个工厂类，所以工厂类中创建的对象不能太多，否则工厂类的业务逻辑就太复杂了，其次由于工厂类封装了对象的创建过程，所以客户端应该不关心对象的创建。总结一下适用场景：
 * 　　（1）需要创建的对象较少。
 * 　　（2）客户端不关心对象的创建过程。
 * 以上就是简单工厂模式简单工厂模式的适用场景，下面看一个具体的实例。
 *
 * 实例：
 * 　　创建一个可以绘制不同形状的绘图工具，可以绘制圆形，正方形，三角形，每个图形都会有一个draw()方法用于绘图，不看代码先考虑一下如何通过该模式设计完成此功能。
 * 　　由题可知圆形，正方形，三角形都属于一种图形，并且都具有draw方法，所以首先可以定义一个接口或者抽象类，作为这三个图像的公共父类，并在其中声明一个公共的draw方法。
 *  Shape.java 形状类
 */
