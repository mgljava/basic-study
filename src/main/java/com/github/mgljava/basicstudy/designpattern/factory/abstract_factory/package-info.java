package com.github.mgljava.basicstudy.designpattern.factory.abstract_factory;

/**
 * 抽象工厂
 *   抽象工厂模式是工厂方法的进一步深化，在这个模式中的工厂类不单单可以创建一个对象，而是可以创建一组对象。这是和工厂方法最大的不同点。
 * 定义：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。（ 在抽象工厂模式中，每一个具体工厂都提供了多个工厂方法用于产生多种不同类型的对象）
 * 抽象工厂和工厂方法一样可以划分为4大部分：
 *   AbstractFactory（抽象工厂）声明了一组用于创建对象的方法，注意是一组。
 *   ConcreteFactory（具体工厂）：它实现了在抽象工厂中声明的创建对象的方法，生成一组具体对象。
 *   AbstractProduct（抽象产品）：它为每种对象声明接口，在其中声明了对象所具有的业务方法。
 *   ConcreteProduct（具体产品）：它定义具体工厂生产的具体对象。
 * 实例：
 *    现在需要做一款跨平台的游戏，需要兼容Android，Ios，Wp三个移动操作系统，
 *    该游戏针对每个系统都设计了一套操作控制器（OperationController）和界面控制器（UIController），
 *    下面通过抽闲工厂方式完成这款游戏的架构设计。
 **/