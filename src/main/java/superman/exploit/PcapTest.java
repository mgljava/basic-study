package superman.exploit;

import java.io.EOFException;
import java.net.Inet4Address;
import java.util.concurrent.TimeoutException;
import org.pcap4j.core.PcapHandle;
import org.pcap4j.core.PcapNativeException;
import org.pcap4j.core.Pcaps;
import org.pcap4j.packet.EthernetPacket;
import org.pcap4j.packet.IpV4Packet;
import org.pcap4j.packet.Packet;
import org.pcap4j.packet.TcpPacket;
import org.pcap4j.packet.namednumber.EtherType;
import org.pcap4j.packet.namednumber.IpNumber;
import org.pcap4j.packet.namednumber.TcpPort;

public class PcapTest {

    private static final int COUNT = 5000;

    // private static final String PCAP_FILE_KEY = ReadPacketFile.class.getName() + ".pcapFile";
    private static final String PCAP_FILE = "/Users/monk/Desktop/myw.pcap";

    public static void main(String[] args) throws Exception {
        PcapHandle handle = null;
        try {
            handle = Pcaps.openOffline(PCAP_FILE);
        } catch (PcapNativeException e) {
            e.printStackTrace();
        }
        if (handle == null) {
            System.out.println("文件解析失败");
            return;
        }
        for (int i = 0; i < COUNT; i++) {
            try {

                Packet packet = handle.getNextPacketEx();

                // 可以直接get你想要的报文类型，只要Pcap4J库原生支持
                EthernetPacket ethernetPacket = packet.get(EthernetPacket.class); // 以太网报文
                if (ethernetPacket == null) {
                    continue;
                }
                EtherType eth_type = ethernetPacket.getHeader().getType();
                //System.out.println(i);
                if (eth_type == EtherType.IPV4) {

                    IpV4Packet ipv4_packet = packet.get(IpV4Packet.class);
                    IpV4Packet.IpV4Header ipV4Packet_header = ipv4_packet.getHeader();

                    if (ipV4Packet_header.getProtocol() == IpNumber.TCP) {
                        TcpPacket tcp_packet = packet.get(TcpPacket.class);
                        TcpPacket.TcpHeader tcp_header = tcp_packet.getHeader();
                        if (!tcp_header.getPsh()) {
                            continue;
                        }
                        Inet4Address srcaddr = ipV4Packet_header.getSrcAddr();
                        Inet4Address dstaddr = ipV4Packet_header.getDstAddr();
                        TcpPort dstport = tcp_header.getDstPort();
                        TcpPort srcport = tcp_header.getSrcPort();
                        System.out.println(i);
                        System.out.println(
                                "seqno=" + i + ",（src ip,dst ip, src port,dst port):(" + srcaddr + "," + dstaddr + "," + srcport + "," + dstport
                                        + ")");

                        String tcpdata = new String(ipv4_packet.getPayload().getRawData());
                        System.out.println("tcp data is:" + tcpdata);

                    }


                } else {

                }
            } catch (TimeoutException ignored) {
            } catch (EOFException e) {
                e.printStackTrace();
                System.out.println("EOF");
                break;
            }
        }

        handle.close();
    }
}
